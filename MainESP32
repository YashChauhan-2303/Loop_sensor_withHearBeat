//MAIN ESP32 CODE

#include <WiFi.h>
#include <esp_now.h>

// MAC addresses of the ESP devices (replace with actual MAC addresses)
uint8_t esp1Mac[] = {0x3c, 0x71, 0xbf, 0x85, 0xb7, 0xec}; // ESP1 (Relays)
uint8_t esp2Mac[] = {0xe4, 0x65, 0xb8, 0x79, 0x5a, 0x74}; // ESP2 (IMU + Temp + Temp)
uint8_t voltageSensorMac[] = {0xa0, 0xdd, 0x6c, 0xb2, 0x42, 0x4c}; // ESP3 (Voltage Sensor)

// Structure for controlling relays on ESP1
typedef struct {
  char command; // 'A', 'a', 'B', 'b', 'C', 'c', 'D', 'd'
} RelayCommand;

// Structure for receiving voltage data
typedef struct {
    float voltage[3];  // Voltages from three dividers
} VoltageData;

// Structure for receiving data from ESP2 (IMU + Temp)
typedef struct {
  float orientation[3];
  float gyro[3];
  float accel[3];
  float mlxTemperature;  // MLX90614 temp
  float dsTemperature;   // DS18B20 temp
} IMUData;

// Structure for receiving data from ESP3 (Temp only)
typedef struct {
  float objectTemp;
  float ambientTemp;
} TempData;

// Structure for heartbeat messages
typedef struct {
  uint8_t deviceId;
  float batteryLevel;
} heartbeat_message;

// Structure to track child ESP status
typedef struct esp_status {
  uint8_t deviceId;
  bool isOnline;
  unsigned long lastHeartbeat;
  float batteryLevel;
} esp_status;

// Variables to hold received data
VoltageData voltageData;
IMUData imuData;
TempData tempData;

// Array to store child ESP status
esp_status childESPs[3];

// Timeout settings
const unsigned long TIMEOUT_INTERVAL = 10000; // 10 seconds timeout

// Function to check ESP timeout status
void checkESPTimeout() {
  unsigned long currentTime = millis();
  for (int i = 0; i < 3; i++) {
    if (childESPs[i].isOnline && (currentTime - childESPs[i].lastHeartbeat > TIMEOUT_INTERVAL)) {
      childESPs[i].isOnline = false;
      String statusJson = "{\"device\":" + String(childESPs[i].deviceId) + 
                         ",\"status\":\"offline\",\"battery\":" + 
                         String(childESPs[i].batteryLevel) + "}";
      Serial.println(statusJson);
    }
  }
}

// Callback for receiving data
void onDataRecv(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
  // Get MAC address of sender
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           info->src_addr[0], info->src_addr[1], info->src_addr[2],
           info->src_addr[3], info->src_addr[4], info->src_addr[5]);

  if (len == sizeof(heartbeat_message)) {
    heartbeat_message *heartbeat = (heartbeat_message*)data;
    int index = heartbeat->deviceId - 1;
    if (index >= 0 && index < 3) {
      childESPs[index].lastHeartbeat = millis();
      childESPs[index].isOnline = true;
      childESPs[index].batteryLevel = heartbeat->batteryLevel;
      
      String statusJson = "{\"device\":" + String(heartbeat->deviceId) + 
                         ",\"status\":\"online\",\"battery\":" + 
                         String(heartbeat->batteryLevel) + 
                         ",\"mac\":\"" + String(macStr) + "\"}";
      Serial.println(statusJson);
    }
  }
  else if (len == sizeof(IMUData)) {
    memcpy(&imuData, data, sizeof(IMUData));
    String imuJson = "{";
    imuJson += "\"orientation\":[" + String(imuData.orientation[0]) + "," + String(imuData.orientation[1]) + "," + String(imuData.orientation[2]) + "],";
    imuJson += "\"gyro\":[" + String(imuData.gyro[0]) + "," + String(imuData.gyro[1]) + "," + String(imuData.gyro[2]) + "],";
    imuJson += "\"accel\":[" + String(imuData.accel[0]) + "," + String(imuData.accel[1]) + "," + String(imuData.accel[2]) + "],";
    imuJson += "\"mlxTemperature\":" + String(imuData.mlxTemperature) + ",";
    imuJson += "\"dsTemperature\":" + String(imuData.dsTemperature);
    imuJson += "}";
    Serial.println(imuJson);
  }
  else if (len == sizeof(TempData)) {
    memcpy(&tempData, data, sizeof(TempData));
    String tempJson = "{";
    tempJson += "\"objectTemp\":" + String(tempData.objectTemp) + ",";
    tempJson += "\"ambientTemp\":" + String(tempData.ambientTemp);
    tempJson += "}";
    Serial.println(tempJson);
  }
  else if (len == sizeof(VoltageData)) {
    memcpy(&voltageData, data, sizeof(VoltageData));
    String voltageJson = "{";
    voltageJson += "\"VB1\":" + String(voltageData.voltage[0]) + ",";
    voltageJson += "\"VB2\":" + String(voltageData.voltage[1]) + ",";
    voltageJson += "\"VB3\":" + String(voltageData.voltage[2]);
    voltageJson += "}";
    Serial.println(voltageJson);
  }
  else {
    Serial.println("{\"error\":\"Unknown data received\"}");
  }
}

// Callback for sent data
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void setup() {
  Serial.begin(115200);

  // Set WiFi to station mode
  WiFi.mode(WIFI_STA);

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register callbacks
  esp_now_register_send_cb(onDataSent);
  esp_now_register_recv_cb(onDataRecv);

  // Add peers
  esp_now_peer_info_t peerInfo;
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  // Add voltage sensor ESP32
  memcpy(peerInfo.peer_addr, voltageSensorMac, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add Voltage Sensor ESP32 as peer");
  }

  // Add ESP1 (Relays)
  memcpy(peerInfo.peer_addr, esp1Mac, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add ESP1 as peer");
  }

  // Add ESP2 (IMU + Temp)
  memcpy(peerInfo.peer_addr, esp2Mac, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add ESP2 as peer");
  }

  // Initialize child ESP tracking
  for (int i = 0; i < 3; i++) {
    childESPs[i].deviceId = i + 1;
    childESPs[i].isOnline = false;
    childESPs[i].lastHeartbeat = 0;
    childESPs[i].batteryLevel = 0.0;
  }

  Serial.print("Main ESP32 MAC Address: ");
  Serial.println(WiFi.macAddress());
  Serial.println("Main ESP Ready");
}

void loop() {
  // Check for serial commands
  if (Serial.available()) {
    char input = Serial.read();
    if (input == 'A' || input == 'a' || input == 'B' || input == 'b' || 
        input == 'C' || input == 'c' || input == 'D' || input == 'd') {
      RelayCommand relayCommand = {input};
      esp_now_send(esp1Mac, (uint8_t *)&relayCommand, sizeof(relayCommand));
      Serial.print("Command Sent to ESP1: ");
      Serial.println(input);
    } else {
      Serial.println("Invalid Command. Use 'A', 'a', 'B', 'b', 'C', 'c', 'D', 'd'");
    }
  }

  // Check ESP timeout status
  checkESPTimeout();
  
  delay(100);
}
